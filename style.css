const phonemes = [
    // Consonants
    { symbol: 'p', type: 'consonant', voiced: false, place: 'bilabial', manner: 'plosive' },
    { symbol: 'b', type: 'consonant', voiced: true, place: 'bilabial', manner: 'plosive' },
    { symbol: 't', type: 'consonant', voiced: false, place: 'alveolar', manner: 'plosive' },
    { symbol: 'd', type: 'consonant', voiced: true, place: 'alveolar', manner: 'plosive' },
    { symbol: 'k', type: 'consonant', voiced: false, place: 'velar', manner: 'plosive' },
    { symbol: 'g', type: 'consonant', voiced: true, place: 'velar', manner: 'plosive' },
    { symbol: 'm', type: 'consonant', voiced: true, place: 'bilabial', manner: 'nasal' },
    { symbol: 'n', type: 'consonant', voiced: true, place: 'alveolar', manner: 'nasal' },
    { symbol: 'KB', type: 'consonant', voiced: true, place: 'velar', manner: 'plosive'},
  
    // Vowels
    { symbol: 'i', type: 'vowel', height: 'close', backness: 'front', rounded: false },
    { symbol: 'u', type: 'vowel', height: 'close', backness: 'back', rounded: true },
    { symbol: 'e', type: 'vowel', height: 'mid', backness: 'front', rounded: false },
    { symbol: 'o', type: 'vowel', height: 'mid', backness: 'back', rounded: true },
    { symbol: 'a', type: 'vowel', height: 'open', backness: 'front', rounded: false },
  ];
  
  const grid = document.getElementById('ipaGrid');
  const typeFilter = document.getElementById('typeFilter');
  
  const consonantFilters = {
    voicing: document.getElementById('voicingFilter'),
    place: document.getElementById('placeFilter'),
    manner: document.getElementById('mannerFilter')
  };
  
  const vowelFilters = {
    height: document.getElementById('heightFilter'),
    backness: document.getElementById('backnessFilter'),
    rounded: document.getElementById('roundedFilter')
  };
  
  const consonantDiv = document.getElementById('consonantFilters');
  const vowelDiv = document.getElementById('vowelFilters');
  
  function renderChart() {
    grid.innerHTML = '';
    phonemes.forEach(ph => {
      const div = document.createElement('div');
      div.classList.add('ipa-symbol');
      div.textContent = ph.symbol;
      div.dataset.type = ph.type;
      grid.appendChild(div);
    });
    applyFilters();
  }
  
  function applyFilters() {
    const allSymbols = document.querySelectorAll('.ipa-symbol');
    const selectedType = typeFilter.value;
  
    allSymbols.forEach(el => el.classList.remove('match'));
  
    phonemes.forEach((ph, i) => {
      let match = true;
  
      if (selectedType !== 'all' && ph.type !== selectedType) {
        match = false;
      }
  
      if (ph.type === 'consonant') {
        if (consonantFilters.voicing.value !== 'all' && String(ph.voiced) !== consonantFilters.voicing.value) {
          match = false;
        }
        if (consonantFilters.place.value !== 'all' && ph.place !== consonantFilters.place.value) {
          match = false;
        }
        if (consonantFilters.manner.value !== 'all' && ph.manner !== consonantFilters.manner.value) {
          match = false;
        }
      }
  
      if (ph.type === 'vowel') {
        if (vowelFilters.height.value !== 'all' && ph.height !== vowelFilters.height.value) {
          match = false;
        }
        if (vowelFilters.backness.value !== 'all' && ph.backness !== vowelFilters.backness.value) {
          match = false;
        }
        if (vowelFilters.rounded.value !== 'all' && String(ph.rounded) !== vowelFilters.rounded.value) {
          match = false;
        }
      }
  
      if (match) {
        grid.children[i].classList.add('match');
      }
    });
  }
  
  // Update filter visibility
  typeFilter.addEventListener('change', () => {
    const selected = typeFilter.value;
    consonantDiv.style.display = selected === 'consonant' ? 'flex' : 'none';
    vowelDiv.style.display = selected === 'vowel' ? 'flex' : 'none';
    applyFilters();
  });
  
  // Add listeners to all filters
  [...Object.values(consonantFilters), ...Object.values(vowelFilters)].forEach(filter =>
    filter.addEventListener('change', applyFilters)
  );
  
  renderChart();
  